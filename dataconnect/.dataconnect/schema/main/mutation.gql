extend type Mutation {
  """
  ✨ Insert a single `Event` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  event_insert(
    """
    Data object to insert into the table.
    """
    data: Event_Data!
  ): Event_KeyOutput! @fdc_generated(from: "Event", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Ticket` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  ticket_insert(
    """
    Data object to insert into the table.
    """
    data: Ticket_Data!
  ): Ticket_KeyOutput! @fdc_generated(from: "Ticket", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `TicketType` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  ticketType_insert(
    """
    Data object to insert into the table.
    """
    data: TicketType_Data!
  ): TicketType_KeyOutput! @fdc_generated(from: "TicketType", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Event` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  event_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Event_Data!]!
  ): [Event_KeyOutput!]! @fdc_generated(from: "Event", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Ticket` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  ticket_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Ticket_Data!]!
  ): [Ticket_KeyOutput!]! @fdc_generated(from: "Ticket", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `TicketType` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  ticketType_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [TicketType_Data!]!
  ): [TicketType_KeyOutput!]! @fdc_generated(from: "TicketType", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Event` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Event`.
  """
  event_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Event_Data!
  ): Event_KeyOutput! @fdc_generated(from: "Event", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Ticket` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Ticket`.
  """
  ticket_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Ticket_Data!
  ): Ticket_KeyOutput! @fdc_generated(from: "Ticket", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `TicketType` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `TicketType`.
  """
  ticketType_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: TicketType_Data!
  ): TicketType_KeyOutput! @fdc_generated(from: "TicketType", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Event` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Event`.
  """
  event_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Event_Data!]!
  ): [Event_KeyOutput!]! @fdc_generated(from: "Event", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Ticket` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Ticket`.
  """
  ticket_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Ticket_Data!]!
  ): [Ticket_KeyOutput!]! @fdc_generated(from: "Ticket", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `TicketType` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `TicketType`.
  """
  ticketType_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [TicketType_Data!]!
  ): [TicketType_KeyOutput!]! @fdc_generated(from: "TicketType", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Event` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Event` or `null` if not found.
  """
  event_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Event_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Event_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Event_Data!
  ): Event_KeyOutput @fdc_generated(from: "Event", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Ticket` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Ticket` or `null` if not found.
  """
  ticket_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Ticket_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Ticket_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Ticket_Data!
  ): Ticket_KeyOutput @fdc_generated(from: "Ticket", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `TicketType` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `TicketType` or `null` if not found.
  """
  ticketType_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: TicketType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: TicketType_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: TicketType_Data!
  ): TicketType_KeyOutput @fdc_generated(from: "TicketType", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Event` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  event_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Event_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Event_Data!
  ): Int! @fdc_generated(from: "Event", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Ticket` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  ticket_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Ticket_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Ticket_Data!
  ): Int! @fdc_generated(from: "Ticket", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `TicketType` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  ticketType_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: TicketType_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: TicketType_Data!
  ): Int! @fdc_generated(from: "TicketType", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Event` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  event_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Event_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Event_FirstRow
  ): Event_KeyOutput @fdc_generated(from: "Event", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Ticket` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  ticket_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Ticket_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Ticket_FirstRow
  ): Ticket_KeyOutput @fdc_generated(from: "Ticket", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `TicketType` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  ticketType_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: TicketType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: TicketType_FirstRow
  ): TicketType_KeyOutput @fdc_generated(from: "TicketType", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Event` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  event_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Event_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Event", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Ticket` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  ticket_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Ticket_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Ticket", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `TicketType` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  ticketType_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: TicketType_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "TicketType", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
